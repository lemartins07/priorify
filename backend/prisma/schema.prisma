generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")  // Defina sua variável de ambiente para conexão
}

enum ShoppingListUserRole {
  OWNER
  COLLABORATOR
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ItemAction {
  CREATED
  UPDATED
  DELETED
}

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  passwordHash String
  roleId     String
  role       Role     @relation(fields: [roleId], references: [id])
  shoppingLists ShoppingList[]
  shoppingListUsers ShoppingListUser[]
  itemHistory ItemHistory[]
  createdAt  DateTime @default(now())
  deletedAt  DateTime? 
}

model Role {
  id          String @id @default(uuid())
  name        String @unique
  description String?
  users       User[]
  rolePermissions RolePermission[]
  createdAt   DateTime @default(now())
}

model Permission {
  id          String @id @default(uuid())
  name        String @unique
  description String?
  rolePermissions RolePermission[]
  createdAt   DateTime @default(now())
}

model RolePermission {
  id          String  @id @default(uuid())
  roleId      String
  permissionId String
  role        Role    @relation(fields: [roleId], references: [id])
  permission  Permission @relation(fields: [permissionId], references: [id])
  createdAt   DateTime @default(now())
}

model ShoppingList {
  id         String   @id @default(uuid())
  name       String
  ownerId    String
  owner      User     @relation(fields: [ownerId], references: [id])
  items      Item[]
  sharedUsers ShoppingListUser[]
  invitations Invitation[]
  createdAt  DateTime @default(now())
  deletedAt  DateTime? 
}

model ShoppingListUser {
  id             String   @id @default(uuid())
  shoppingListId String
  userId         String
  role           ShoppingListUserRole @default(COLLABORATOR)
  shoppingList   ShoppingList @relation(fields: [shoppingListId], references: [id])
  user           User     @relation(fields: [userId], references: [id])
  createdAt      DateTime @default(now())
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  items     Item[]
  createdAt DateTime @default(now())
}

model Item {
  id              String   @id @default(uuid())
  shoppingListId  String
  categoryId      String?
  name            String
  priority        Int      @default(3)
  shoppingList    ShoppingList @relation(fields: [shoppingListId], references: [id])
  category        Category?    @relation(fields: [categoryId], references: [id])
  prices         ItemPrice[]
  history        ItemHistory[]
  createdAt      DateTime @default(now())
  deletedAt      DateTime? 
}

model ItemPrice {
  id       String   @id @default(uuid())
  itemId   String
  storeName String?
  link     String?
  price    Decimal
  item     Item     @relation(fields: [itemId], references: [id])
  createdAt DateTime @default(now())
}

model ItemHistory {
  id           String  @id @default(uuid())
  itemId       String
  userId       String
  action       ItemAction
  previousData Json?
  newData      Json?
  item         Item    @relation(fields: [itemId], references: [id])
  user         User    @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
}

model Invitation {
  id                 String  @id @default(uuid())
  shoppingListId     String
  invitedUserEmail   String
  status             InvitationStatus  @default(PENDING)
  shoppingList       ShoppingList @relation(fields: [shoppingListId], references: [id])
  createdAt          DateTime @default(now())
}
